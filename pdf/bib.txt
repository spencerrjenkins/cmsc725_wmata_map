Annotated Bibliography 
A red star (*) indicates I think the paper is most closely related. 
Geospatial Data Structures 
*Libera, F. D. (1986). Using B-trees to solve geographic range queries. The Computer Journal, 
29(2), 176–180. https://doi.org/10.1093/comjnl/29.2.176  
• Although my project isn’t intended for the user to make queries, I could potentially use 
some kind of query-like operation to search for points of interest in determining likely 
parts of the map to connect. 
*Samet, H., Rosenfeld, A., Shaffer, C. A., & Webber, R. E. (1984). A geographic information 
system using Quadtrees. Pattern Recognition, 17(6), 647–656. 
https://doi.org/10.1016/0031-3203(84)90018-9  
• From the beloved professor of this course. I saw interest in Prof. Samet’s quadtree and B-
tree structures to divide the map into regions of interest. Same comment as above, the 
main goal of my work isn’t to enable the user to make geographic queries, but a query-
like operation may be interesting to pursue in determining points of transit need. 
Toman, J., & Olszewska, J. I. (2014). Algorithm for graph building based on google maps and 
google earth. 2014 IEEE 15th International Symposium on Computational Intelligence and 
Informatics (CINTI), 55–60. https://doi.org/10.1109/cinti.2014.7028728  
• This paper proposes an algorithm to build geographic data into a network graph. It uses 
KML files and is compatible with Google Earth and GIS programs. Could be useful for 
the identification of station locations and the building of a network. 
Graph Deep Learning 
I’m not leaning towards a deep learning approach at this time but did some literature review. 
Georgousis, S., Kenning, M. P., & Xie, X. (2021). Graph deep learning: State of the art and 
Challenges. IEEE Access, 9, 22106–22140. https://doi.org/10.1109/access.2021.3055280  
• This one is about graph representation learning with CNNs. It may be informative for the 
graph deep learning approach I proposed. This paper is mostly a survey over the field. 
Twaty, M., Ghrab, A., & Skhiri, S. (2019). GraphOpt: A Framework for automatic parameters 
tuning of graph processing frameworks. 2019 IEEE International Conference on Big Data 
(Big Data), 3744–3753. https://doi.org/10.1109/bigdata47090.2019.9006320  
• Another paper informative for the graph deep learning approach.  
Liu, X., Meng, S., Li, Q., Qi, L., Xu, X., Dou, W., & Zhang, X. (2023). SMEF: Social-aware 
multi-dimensional edge features-based graph representation learning for recommendation. 
Proceedings of the 32nd ACM International Conference on Information and Knowledge 
Management, 1566–1575. https://doi.org/10.1145/3583780.3615063  
• Another graph deep learning paper. 
Genetic Algorithms 
*Chien, S., Yang, Z., & Hou, E. (2001). Genetic algorithm approach for transit route planning 
and Design. Journal of Transportation Engineering, 127(3), 200–207. 
https://doi.org/10.1061/(asce)0733-947x(2001)127:3(200)  
• I was a bit skeptical at first because of the title, as genetic algorithms seem to have fallen 
out of interest. However, it kept coming up and up. The algorithm here is useful because 
it almost exactly formulates the problem here that I want to solve, except it does so with 
bus networks and shows great results.  
*Dib, O., Moalic, L., Manier, M.-A., & Caminada, A. (2017). An advanced GA–VNS 
combination for multicriteria route planning in public transit networks. Expert Systems 
with Applications, 72, 67–82. https://doi.org/10.1016/j.eswa.2016.12.009  
• This paper proposes a routing algorithm augmenting a genetic algorithm to determine 
optimal transit routes. One key difference between this paper and mine is that this one 
assumes the existence of an existing network. It may be useful in determining how to 
score my network. For example, by running this algorithm on a random sample of 
hypothetical transit users and taking a weighted average? 
Overview of Field 
*Bast, H. et al. (2016). Route Planning in Transportation Networks. In: Kliemann, L., Sanders, 
P. (eds) Algorithm Engineering. Lecture Notes in Computer Science(), vol 9220. Springer, 
Cham. https://doi.org/10.1007/978-3-319-49487-6_2 
• Chapter from an overview book on transit route planning algorithms. Should be good in 
getting an overview of the field. 
*Davis, S., & Impagliazzo, R. (2007). Models of greedy algorithms for graph problems. 
Algorithmica, 54(3), 269–317. https://doi.org/10.1007/s00453-007-9124-4  
• An overview paper of greedy algorithms, including ones for graph network creation 
problems. My a priori interest in greedy algorithms in particular may not give the best 
results but it may be interesting to investigate. These methods may be among the fastest 
even if suboptimal. 
Real-World Connection 
Not included in this bibliography but essential to the construction of my project will be the 
crystallization of a narrative about the Washington Metro and why my work is justified. 
This will require an explanation of the transit network’s history with citations from news 
sources, books, interviews, and other non-academic-article sources for claims such as “The 
Washington Metro was designed primarily for 9-5 commuters” and “The modeshare of 
Washington, D.C. remains X% towards personal vehicles”.  
Camporeale, R., Caggiani, L., Fonzone, A., & Ottomanelli, M. (2016). Quantifying the impacts 
of horizontal and vertical equity in transit route planning. Transportation Planning and 
Technology, 40(1), 28–44. https://doi.org/10.1080/03081060.2016.1238569  
• This non-technical paper on equity in transit planning will be informative in grounding 
my approach in real-world concerns. 
Modes Besides Rapid Transit 
I  consider the creation of similar computational processes for other modes of transportation, such 
as smart/adaptive transit, buses, and high-speed rail. 
Nayan, A. (n.d.). Optimal Bus Transit System Considering Service Network Design and Route 
Packaging. https://doi.org/10.32657/10356/69546  
Owais, M., & Ahmed, A. S. (2022). Frequency based transit assignment models: Graph 
Formulation Study. IEEE Access, 10, 62991–63003. 
https://doi.org/10.1109/access.2022.3182046  
*Périvier, N., Hssaine, C., Samaranayake, S., & Banerjee, S. (2021). Real -time approximate 
routing for Smart Transit Systems. ACM SIGMETRICS Performance Evaluation Review, 
49(1), 73–74. https://doi.org/10.1145/3543516.3460096  
• I may take interest in the algorithms that smart transit systems (such as micromobility  or 
autonomous vehicles) use in determining routes, as they may also be useful in finding 
static routes. Furthermore, this paper’s proposed algorithm adheres to constraints that 
seem useful for my network, namely limiting transfers and pre-defined lines.  
*Roy, S., & Maji, A. (2023). High-speed rail station location optimization using customized 
utility functions. IEEE Intelligent Transportation Systems Magazine, 15(3), 26–35. 
https://doi.org/10.1109/mits.2022.3207411  
• I am highly interested in this paper’s methodology, particularly its evaluation method. 
Also, the gravity model based on population density. Certain factors this study considers 
would not be relevant to my project, such as the transfer potential to local modes. 
Theses/Dissertations 
Fan, W. (2004). Optimal transit route network design problem: Algorithms, implementations, 
and numerical results (Order No. 3143741). Available from ProQuest Dissertations & 
Theses Global. (305127519). https://www.proquest.com/dissertations-theses/optimal-
transit-route-network-design-problem/docview/305127519/se-2 
*Mahmoudi, R. (2024). Optimal configurations for urban transit: A study on bus and express 
network design via analytical approaches and mathematical programming (Doctoral thesis, 
University of Calgary, Calgary, Canada). Retrieved from https://prism.ucalgary.ca. 
• This one’s a doctoral thesis from a civil engineer. The mathematical programming 
methods the thesis discusses may give me a different perspective.

Project Results Update 
I expanded the original dataset to include census blocks in DC as well as the DC Metro 
Area counties in Maryland and Virginia. In MD, the counties are PG and Montgomery, while 
in Virginia they consist of Arlington County, Alexandria City, Fairfax County, Fairfax City,  and 
Falls Church City. (I am currently leaving out Virginia’s Loudoun County, Prince William 
County, Manassas City, and Manassas Park City for reasons I will get into further down.) 
 
Figure 1. Map of census blocks in the metropolitan DC area, as defined above. 
I have improved the network creation algorithm. As a reminder, in the last update, the 
network was constructed by creating a Gabriel graph of the identified station locations. 
This resulted in a graph with excessive connections compared to a realistic metro map, so 
my first effort was to limit these connections. My improvement in this regard is using a 
minimum spanning tree (MST) on the Gabriel graph. This results in a much sparser network 
without the high number of redundancies in the Gabriel graph.  
 
Figure 2. Metro network on the expanded dataset, with connections limited to minimum 
spanning tree. 
 
Figure 3. Same data as above, zoomed in on DC urban core. 
My next improvement addresses the high number of clusters still visible in the minimum 
spanning tree. I use the Louvain community detection algorithm to detect clusters and 
then merge them, creating a much more efficient network. 
 
 
Figure 4. Minimum spanning tree network with Louvain community merging applied. 
 
Figure 5. Same data as above, zoomed in on DC urban core. 
As I iron out the evaluation metric more, I have created a visual, qualitative evaluation 
criterion here by overlaying my network creation over an urban map and adding the shapes 
of the current metro network. 
So far, the network does connect some areas that I would consider high density together, 
and even provides a link I have long considered a critical absence in the WMATA network : a 
connection between Montgomery County, MD and Fairfax County, VA. 
Although in my initial project planning documents I stated that I didn’t want to place too 
much importance on recreating existing transit networks, I envision my transit network 
being roughly a superset of the existing network. However, there are many sections of the 
real-world network that my algorithm has not successfully recreated. Furthermore, the 
network still fails to connect the underserved areas I mentioned in the project introduction: 
Georgetown and Anacostia. 
I’m also thinking that the census block data is a bit too granular, at least given the algorithm 
I’m currently using. The algorithm mostly does a good job of identifying areas in need of 
public transit, but I can think of two main problems. First, there are large clusters of 
stations in dense areas, indicating that the algorithm does a poor job of spacing stations 
out, which is what the partitioning was intended to do. I am considering remedying this by 
using a point elimination algorithm to merge points by closest edge distances. 
The second is there are a lot of points on outlier census blocks, which are in some cases 
not indicative of transit need. For example, there are some very small blocks that have a 
very high calculated population density, even if they only have 50 people in them. I am 
thinking of remedying this by considering looking at census tract and block group data as 
well.  

Project Results Update 
New Data 
I have significantly expanded the dataset that the algorithm considers. It now incorporates 
points of high transit potential across multiple categories, including employment, 
entertainment, healthcare, government, tourism, and military. I sourced this 
comprehensive dataset by accessing the REST APIs from Open Data DC and Maryland 
state data resources. I am currently working on adding the equivalent data for Virginia. 
Network Algorithm Improvements 
• Adjustable Louvain Community Agglomeration 
I introduced a "resolution" parameter to the Louvain community detection algorithm. This 
parameter allows control over the granularity of community merging. By increasing the 
resolution from 1 (in the previous update) to 10, I achieved a finer partitioning, resulting in a 
slightly greater number of stations. This adjustment provides a more detailed and realistic 
representation of transit hubs. 
 
Figure 3. Louvain Community clustering with resolution 1, old value. 
 
Figure 4. Updated Louvain Community clustering with resolution 5. 
• Removal of Minimum Spanning Tree pruning approach 
I stopped using the minimum spanning tree (MST) algorithm from the previous update. 
While MSTs ensure network connectivity, they produced networks that were too sparse and 
irregular. 
• New graph pruning approach 
To replace the MST pruning strategy, I implemented a basic greedy algorithm to reduce 
node degree in a way that I designed to reflect some basic real-world transit design 
considerations. 
First, the algorithm removes edges where the angle between adjacent connections is 30 
degrees or less. This reflects the real-world tendency for transit route interchanges to favor 
perpendicular or near-perpendicular angles. For every pair of edges from a given vertex, if 
the angle between them is found to be 30 degrees or less, the longer of the two edges is 
removed. 
 
Figure 1. Old version of transit networks pruned using a minimum spanning tree. 
 
Figure 2. New transit networks with improved pruning methods. 
Second, for any nodes still exceeding a degree of 4, the algorithm prunes the longest 
remaining edges. This constraint reflects the typical structure of transit stations, which 
generally have at most four directions of travel, even if multiple lines interline within each 
direction (e.g., the intersection of the blue, orange, and silver lines with the green and 
yellow lines at L'Enfant Plaza is a good example). 
In both of these steps, I choose to remove the longer of the conflicting edges because I 
want the network to tend towards closer connections. 
• Transit Line Generation via Random Walks 
I initiated work on the most exciting development so far: generating realistic transit lines. I 
achieve this using a sequence of random walks with some constraints. Each walk 
prioritizes maintaining the straightest path possible while avoiding revisiting vertices or 
edges. Subsequent walks may intersect previously traversed vertices but cannot reuse 
edges. Walks continue until they reach a user-specified maximum distance (based on edge 
weights representing spatial distances). 
So, the overall pipeline is as follows: first, I load the points of transit interest into a graph 
structure. I then construct a Gabriel graph on the points with resolution of 5. I then prune 
the resulting Gabriel graph, and perform 12 random walks on the graph to create 12 transit 
lines. 
 
 
Figure 5. First output of random walk transit networks. (Note that I am still working to 
resolve the color mismatch between plots.) 
Discussion: 
The updated algorithm produces more realistic and coherent transit networks, particularly 
across DC and Maryland. These networks now capture important structural features such 
as ring routes and suburb-to-suburb connections, reflecting real-life transit dynamics more 
comprehensively.  
This week’s progress is an exciting step forward, but I continue to look towards determining 
how to compare or score the networks produced. 
The new data that I have incorporated seems to create a network that connects important 
areas. The litmus test of Anacostia and Georgetown now being connected is finally passed! 
The network now even connects to College Park, and with lines from College Park in several 
directions!  
One issue is that there is a large discrepancy between the shortest lines and the longest 
lines. I will work to make sure the line length is largely more consistent. 

Project Results Update 
I expanded the original dataset to include census blocks in DC as well as the DC Metro 
Area counties in Maryland and Virginia. In MD, the counties are PG and Montgomery, while 
in Virginia they consist of Arlington County, Alexandria City, Fairfax County, Fairfax City,  and 
Falls Church City. (I am currently leaving out Virginia’s Loudoun County, Prince William 
County, Manassas City, and Manassas Park City for reasons I will get into further down.) 
 
Figure 1. Map of census blocks in the metropolitan DC area, as defined above. 
I have improved the network creation algorithm. As a reminder, in the last update, the 
network was constructed by creating a Gabriel graph of the identified station locations. 
This resulted in a graph with excessive connections compared to a realistic metro map, so 
my first effort was to limit these connections. My improvement in this regard is using a 
minimum spanning tree (MST) on the Gabriel graph. This results in a much sparser network 
without the high number of redundancies in the Gabriel graph.  
 
Figure 2. Metro network on the expanded dataset, with connections limited to minimum 
spanning tree. 
 
Figure 3. Same data as above, zoomed in on DC urban core. 
My next improvement addresses the high number of clusters still visible in the minimum 
spanning tree. I use the Louvain community detection algorithm to detect clusters and 
then merge them, creating a much more efficient network. 
 
 
Figure 4. Minimum spanning tree network with Louvain community merging applied. 
 
Figure 5. Same data as above, zoomed in on DC urban core. 
As I iron out the evaluation metric more, I have created a visual, qualitative evaluation 
criterion here by overlaying my network creation over an urban map and adding the shapes 
of the current metro network. 
So far, the network does connect some areas that I would consider high density together, 
and even provides a link I have long considered a critical absence in the WMATA network : a 
connection between Montgomery County, MD and Fairfax County, VA. 
Although in my initial project planning documents I stated that I didn’t want to place too 
much importance on recreating existing transit networks, I envision my transit network 
being roughly a superset of the existing network. However, there are many sections of the 
real-world network that my algorithm has not successfully recreated. Furthermore, the 
network still fails to connect the underserved areas I mentioned in the project introduction: 
Georgetown and Anacostia. 
I’m also thinking that the census block data is a bit too granular, at least given the algorithm 
I’m currently using. The algorithm mostly does a good job of identifying areas in need of 
public transit, but I can think of two main problems. First, there are large clusters of 
stations in dense areas, indicating that the algorithm does a poor job of spacing stations 
out, which is what the partitioning was intended to do. I am considering remedying this by 
using a point elimination algorithm to merge points by closest edge distances. 
The second is there are a lot of points on outlier census blocks, which are in some cases 
not indicative of transit need. For example, there are some very small blocks that have a 
very high calculated population density, even if they only have 50 people in them. I am 
thinking of remedying this by considering looking at census tract and block group data as 
well. 